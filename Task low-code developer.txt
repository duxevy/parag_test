------
Часть 1. Теория.

1) Ознакомьтесь с документом "Low-code Entry Level". Данный документ описывает базовые понятия лоукодного сервиса, процесс создания простейшей датамодели лоукодного приложения.
На скриншотах приведен пример возможного взаимодействия с low-code платформой с помощью front-end компонента, но лишь в качестве примерной визуализации подобного процесса.
Ожидается, что прочитав статью мы примерно поймете из каких первичных сущностей состоит модель условного лоукод приложения и как они могут взаимодействовать на уровне теории.
2) Ответьте, как вы понимаете термин «дата-модель»?
3) Как вы понимаете термин «бизнес-процесс»?

------
Часть 2. Практика.

1) Создание базовой лоукодной модели

Предложите учебно-демонстрационную дата-модель простой лоу-код системы для управления поручениями и\или проектами и обоснуйте, почему ваша датамодель имеет именно такой набор сущностей\связей\атрибутов.
В чем преимущества вашего приложения по сравнению с хардкодным аналогом? За основу вы можете взять системы Monday.com, trello.com, JIRA.

В соседней папке "CLI" вам предоставлены компоненты питон-приложения (cli_core.py, cli_lowcode.py), которое способно авторизовываться в нашей лоу-код системе (cli_rest_api_client.py) и выполнять команды,
заранее записанные в .txt файл с помощью интерпретатора (cli_script.py).

Описание команд, которые могут быть использованы в .txt файле, предназначенном для интерпретатора, находится в README.txt

НЕ имея доступ к реальной системе, ознакомьтесь с ридми и напишите коллекцию по развороту датамодели вашего лоукод приложения в .txt файле, используя описанные в ридми команды.
Не бойтесь экспериментировать и предполагать.

Загляните в само питон-приложение (cli_core.py, cli_lowcode.py) и, помимо написания .txt коллекции, попробуйте предложить питон-скрипт, использующий библиотеку cli_core, который создаст несколько сущностей
из вашего приложения, минуя интерпретатор.

Ответ принимается в виде .txt файла CLI-коллекции, где используются команды из README.txt И .py файла, где используются функции библиотеки cli_core напрямую

===

2) Анализ и правки лоукодного скрипта.

В файле EMPLOYEETIMEACCOUTING.PY вы можете найти типичный пример лорукодного скрипта "продвинутого" уровня.
Данный скрипт является частью приложения по учету рабочего времени сотрудников.
Данное приложение оперирует 4мя основными сущностями - EMPLOYEE(личная карточка сотрудника), TIMERANGE(временной отрезок с datetime атрибутами FROM, TO, а также boolean isSubtract,
который говорит о том, является ли данный отрезок отработанным ИЛИ данный отрезок надо отнять от уже посчитанного времени, например в случае корректировки ошибочных данных силами HR)
и три типа ACTIVITY - дневная, недельная и месячная, которые и содержат финуальную информацию о сумме отработанного времени сотрудника за заданный период, а также информацию о данном периоде.


В силу того, что бэкэнд самой платформы написан на языке C#, питон скрипты исполняются через транслятор IronPython (документацию вы можете найти в интернете),
а также в контексте данных скриптов доступны функции System модуля языка C#, которые могут использоваться для более удобной работы с данными при их чтении\записи в базу данных.
Данный скрипт триггерится, если один из сотрудников совершил чекаут (завершение текущего TIMERANGE).

Функции самой лоукод-системы вам предлагается понять на основе представленного кода, интерпретируя их назначение и ход работы исходя из того, что вы прочитали в теоретическом документе.

-Прочитайте представленный скрипт и откомментируйте его так, чтобы разработчик-новичок смог бы эффективно внести в него необходимую правку.
-Предложите оптимизации там, где считаете это необходимым.
-Попробуйте внедрить функцию, которая могла бы СОЗДАТЬ сущность типа OVERTIME с атрибутом isOverTime = 'TRUE' и привязать ее к сотруднику, если сегодншняя сумма дневной активности по факту закрытия текущего TIMERANGE превысила 8ч.